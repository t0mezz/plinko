{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\nconst useBallMovement = (initialX, initialY) => {\n  _s();\n  const initialVelocityX = (Math.random() - 0.5) * 1; // From -0.5 to 0.5\n\n  const [position, setPosition] = useState({\n    x: initialX,\n    y: initialY\n  });\n  const [velocity, setVelocity] = useState({\n    x: initialVelocityX,\n    y: 0\n  });\n  const acceleration = {\n    x: 0,\n    y: 0.98 / 2\n  }; // Gravity\n\n  const positionRef = useRef(position);\n  const velocityRef = useRef(velocity);\n  const pegs = generateCenteredPyramidPegs(10, 375, 70);\n  useEffect(() => {\n    positionRef.current = position;\n  }, [position]);\n  useEffect(() => {\n    velocityRef.current = velocity;\n  }, [velocity]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Update velocity with acceleration\n      setVelocity(prevVel => {\n        const newVel = {\n          x: prevVel.x + acceleration.x,\n          y: prevVel.y + acceleration.y\n        };\n        velocityRef.current = newVel;\n        return newVel;\n      });\n\n      // Update position with velocity\n      setPosition(prevPos => {\n        const newPos = {\n          x: prevPos.x + velocityRef.current.x,\n          y: prevPos.y + velocityRef.current.y\n        };\n        positionRef.current = newPos;\n        return newPos;\n      });\n\n      // Detect collision with pegs\n      pegs.forEach(peg => {\n        const dx = positionRef.current.x - peg.x;\n        const dy = positionRef.current.y - peg.y;\n        const distance = Math.hypot(dx, dy);\n        const minDistance = 15; // Ball radius + peg radius\n\n        if (distance < minDistance) {\n          const normalX = dx / distance;\n          const normalY = dy / distance;\n          const relVelX = velocityRef.current.x;\n          const relVelY = velocityRef.current.y;\n          const speed = relVelX * normalX + relVelY * normalY;\n\n          // Reflect velocity\n          const newVelX = velocityRef.current.x - 2 * speed * normalX;\n          const newVelY = velocityRef.current.y - 2 * speed * normalY;\n\n          // Apply damping factor\n          setVelocity({\n            x: newVelX * 0.2,\n            y: newVelY * 0.2\n          });\n          velocityRef.current = {\n            x: newVelX * 0.2,\n            y: newVelY * 0.2\n          };\n\n          // Adjust position to prevent sticking\n          setPosition({\n            x: positionRef.current.x + normalX * (minDistance - distance + 0.5),\n            y: positionRef.current.y + normalY * (minDistance - distance + 0.5)\n          });\n          positionRef.current = {\n            x: positionRef.current.x + normalX * (minDistance - distance + 0.5),\n            y: positionRef.current.y + normalY * (minDistance - distance + 0.5)\n          };\n        }\n      });\n\n      // Check for wall collisions\n      if (positionRef.current.x < 10 || positionRef.current.x > 740) {\n        setVelocity(prevVel => {\n          const newVel = {\n            x: -prevVel.x * 0.8,\n            y: prevVel.y\n          };\n          velocityRef.current = newVel;\n          return newVel;\n        });\n        setPosition(prevPos => {\n          const newPos = {\n            x: positionRef.current.x < 10 ? 10 : 740,\n            y: prevPos.y\n          };\n          positionRef.current = newPos;\n          return newPos;\n        });\n      }\n    }, 16); // ~60fps\n\n    return () => clearInterval(interval);\n  }, []); // Run once when mounted\n\n  return position;\n};\n_s(useBallMovement, \"Q1xNw/e9oCxfx0TKibZVhuOuP/8=\");\nconst generateCenteredPyramidPegs = (rows, centerX, startY) => {\n  const pegs = [];\n  const spacingX = 45;\n  const spacingY = 60;\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col <= row; col++) {\n      pegs.push({\n        x: centerX + (col - row / 2) * spacingX,\n        y: startY + row * spacingY\n      });\n    }\n  }\n  return pegs;\n};\nexport default useBallMovement;","map":{"version":3,"names":["useEffect","useState","useRef","useBallMovement","initialX","initialY","_s","initialVelocityX","Math","random","position","setPosition","x","y","velocity","setVelocity","acceleration","positionRef","velocityRef","pegs","generateCenteredPyramidPegs","current","interval","setInterval","prevVel","newVel","prevPos","newPos","forEach","peg","dx","dy","distance","hypot","minDistance","normalX","normalY","relVelX","relVelY","speed","newVelX","newVelY","clearInterval","rows","centerX","startY","spacingX","spacingY","row","col","push"],"sources":["/home/tom/Desktop/plinko/src/hooks/useBallMovement.js"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\n\nconst useBallMovement = (initialX, initialY) => {\n  const initialVelocityX = (Math.random() - 0.5) * 1; // From -0.5 to 0.5\n\n  const [position, setPosition] = useState({ x: initialX, y: initialY });\n  const [velocity, setVelocity] = useState({ x: initialVelocityX, y: 0 });\n  const acceleration = { x: 0, y: 0.98 / 2 }; // Gravity\n\n  const positionRef = useRef(position);\n  const velocityRef = useRef(velocity);\n  const pegs = generateCenteredPyramidPegs(10, 375, 70);\n\n  useEffect(() => {\n    positionRef.current = position;\n  }, [position]);\n\n  useEffect(() => {\n    velocityRef.current = velocity;\n  }, [velocity]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Update velocity with acceleration\n      setVelocity((prevVel) => {\n        const newVel = {\n          x: prevVel.x + acceleration.x,\n          y: prevVel.y + acceleration.y,\n        };\n        velocityRef.current = newVel;\n        return newVel;\n      });\n\n      // Update position with velocity\n      setPosition((prevPos) => {\n        const newPos = {\n          x: prevPos.x + velocityRef.current.x,\n          y: prevPos.y + velocityRef.current.y,\n        };\n        positionRef.current = newPos;\n        return newPos;\n      });\n\n      // Detect collision with pegs\n      pegs.forEach((peg) => {\n        const dx = positionRef.current.x - peg.x;\n        const dy = positionRef.current.y - peg.y;\n        const distance = Math.hypot(dx, dy);\n        const minDistance = 15; // Ball radius + peg radius\n\n        if (distance < minDistance) {\n          const normalX = dx / distance;\n          const normalY = dy / distance;\n\n          const relVelX = velocityRef.current.x;\n          const relVelY = velocityRef.current.y;\n\n          const speed = relVelX * normalX + relVelY * normalY;\n\n          // Reflect velocity\n          const newVelX = velocityRef.current.x - 2 * speed * normalX;\n          const newVelY = velocityRef.current.y - 2 * speed * normalY;\n\n          // Apply damping factor\n          setVelocity({\n            x: newVelX * 0.2,\n            y: newVelY * 0.2,\n          });\n          velocityRef.current = {\n            x: newVelX * 0.2,\n            y: newVelY * 0.2,\n          };\n\n          // Adjust position to prevent sticking\n          setPosition({\n            x: positionRef.current.x + normalX * (minDistance - distance + 0.5),\n            y: positionRef.current.y + normalY * (minDistance - distance + 0.5),\n          });\n          positionRef.current = {\n            x: positionRef.current.x + normalX * (minDistance - distance + 0.5),\n            y: positionRef.current.y + normalY * (minDistance - distance + 0.5),\n          };\n        }\n      });\n\n      // Check for wall collisions\n      if (positionRef.current.x < 10 || positionRef.current.x > 740) {\n        setVelocity((prevVel) => {\n          const newVel = {\n            x: -prevVel.x * 0.8,\n            y: prevVel.y,\n          };\n          velocityRef.current = newVel;\n          return newVel;\n        });\n        setPosition((prevPos) => {\n          const newPos = {\n            x: positionRef.current.x < 10 ? 10 : 740,\n            y: prevPos.y,\n          };\n          positionRef.current = newPos;\n          return newPos;\n        });\n      }\n    }, 16); // ~60fps\n\n    return () => clearInterval(interval);\n  }, []); // Run once when mounted\n\n  return position;\n};\n\nconst generateCenteredPyramidPegs = (rows, centerX, startY) => {\n  const pegs = [];\n  const spacingX = 45;\n  const spacingY = 60;\n\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col <= row; col++) {\n      pegs.push({\n        x: centerX + (col - row / 2) * spacingX,\n        y: startY + row * spacingY,\n      });\n    }\n  }\n\n  return pegs;\n};\n\nexport default useBallMovement;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}