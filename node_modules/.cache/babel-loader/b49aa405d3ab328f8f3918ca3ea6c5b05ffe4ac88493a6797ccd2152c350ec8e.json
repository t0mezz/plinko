{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nconst useBallMovement = (initialX, initialY) => {\n  _s();\n  const [position, setPosition] = useState({\n    x: initialX,\n    y: initialY\n  });\n  const [velocity, setVelocity] = useState({\n    x: 0,\n    y: 0\n  });\n  const acceleration = {\n    x: 0,\n    y: 0.98\n  }; // Gravity\n  const pegs = generateCenteredPyramidPegs(10, 375, 70);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Update velocity with acceleration\n      setVelocity(prevVel => ({\n        x: prevVel.x + acceleration.x,\n        y: prevVel.y + acceleration.y\n      }));\n\n      // Update position with velocity\n      setPosition(prevPos => ({\n        x: prevPos.x + velocity.x,\n        y: prevPos.y + velocity.y\n      }));\n\n      // Detect collision with pegs\n      pegs.forEach(peg => {\n        const dx = position.x - peg.x;\n        const dy = position.y - peg.y;\n        const distance = Math.hypot(dx, dy);\n        const minDistance = 15; // Ball radius + peg radius\n\n        if (distance < minDistance) {\n          // Calculate normal vector\n          const normalX = dx / distance;\n          const normalY = dy / distance;\n\n          // Calculate relative velocity\n          const relVelX = velocity.x;\n          const relVelY = velocity.y;\n\n          // Calculate speed in normal direction\n          const speed = relVelX * normalX + relVelY * normalY;\n\n          // Reflect velocity\n          let newVelX = velocity.x - 2 * speed * normalX;\n          let newVelY = velocity.y - 2 * speed * normalY;\n\n          // Apply damping factors\n          newVelX = newVelX * 0.9 + (Math.random() - 0.5) * 1.5; // Increased horizontal randomness\n          newVelY *= 0.1; // Weaker vertical bounce\n\n          setVelocity({\n            x: newVelX,\n            y: newVelY\n          });\n\n          // Adjust position to prevent sticking\n          setPosition({\n            x: position.x + normalX * (minDistance - distance + 0.5),\n            y: position.y + normalY * (minDistance - distance + 0.5)\n          });\n        }\n      });\n\n      // Check for wall collisions\n      if (position.x < 10 || position.x > 740) {\n        setVelocity(prevVel => ({\n          x: -prevVel.x * 0.8,\n          y: prevVel.y\n        }));\n        setPosition(prevPos => ({\n          x: position.x < 10 ? 10 : 740,\n          y: prevPos.y\n        }));\n      }\n    }, 16); // ~60fps\n\n    return () => clearInterval(interval);\n  }, [position, velocity, pegs]);\n  return position;\n};\n_s(useBallMovement, \"DFZcSVpdq3ZGxI6M+du9tj4U3iU=\");\nconst generateCenteredPyramidPegs = (rows, centerX, startY) => {\n  const pegs = [];\n  const spacingX = 45;\n  const spacingY = 60;\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col <= row; col++) {\n      pegs.push({\n        x: centerX + (col - row / 2) * spacingX,\n        y: startY + row * spacingY\n      });\n    }\n  }\n  return pegs;\n};\nexport default useBallMovement;","map":{"version":3,"names":["useEffect","useState","useBallMovement","initialX","initialY","_s","position","setPosition","x","y","velocity","setVelocity","acceleration","pegs","generateCenteredPyramidPegs","interval","setInterval","prevVel","prevPos","forEach","peg","dx","dy","distance","Math","hypot","minDistance","normalX","normalY","relVelX","relVelY","speed","newVelX","newVelY","random","clearInterval","rows","centerX","startY","spacingX","spacingY","row","col","push"],"sources":["/home/tom/Desktop/plinko/src/hooks/useBallMovement.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst useBallMovement = (initialX, initialY) => {\n  const [position, setPosition] = useState({ x: initialX, y: initialY });\n  const [velocity, setVelocity] = useState({ x: 0, y: 0 });\n  const acceleration = { x: 0, y: 0.98 }; // Gravity\n  const pegs = generateCenteredPyramidPegs(10, 375, 70);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Update velocity with acceleration\n      setVelocity((prevVel) => ({\n        x: prevVel.x + acceleration.x,\n        y: prevVel.y + acceleration.y,\n      }));\n\n      // Update position with velocity\n      setPosition((prevPos) => ({\n        x: prevPos.x + velocity.x,\n        y: prevPos.y + velocity.y,\n      }));\n\n      // Detect collision with pegs\n      pegs.forEach((peg) => {\n        const dx = position.x - peg.x;\n        const dy = position.y - peg.y;\n        const distance = Math.hypot(dx, dy);\n        const minDistance = 15; // Ball radius + peg radius\n\n        if (distance < minDistance) {\n          // Calculate normal vector\n          const normalX = dx / distance;\n          const normalY = dy / distance;\n\n          // Calculate relative velocity\n          const relVelX = velocity.x;\n          const relVelY = velocity.y;\n\n          // Calculate speed in normal direction\n          const speed = relVelX * normalX + relVelY * normalY;\n\n          // Reflect velocity\n          let newVelX = velocity.x - 2 * speed * normalX;\n          let newVelY = velocity.y - 2 * speed * normalY;\n\n          // Apply damping factors\n          newVelX = newVelX * 0.9 + (Math.random() - 0.5) * 1.5; // Increased horizontal randomness\n          newVelY *= 0.1; // Weaker vertical bounce\n\n          setVelocity({\n            x: newVelX,\n            y: newVelY,\n          });\n\n          // Adjust position to prevent sticking\n          setPosition({\n            x: position.x + normalX * (minDistance - distance + 0.5),\n            y: position.y + normalY * (minDistance - distance + 0.5),\n          });\n        }\n      });\n\n      // Check for wall collisions\n      if (position.x < 10 || position.x > 740) {\n        setVelocity((prevVel) => ({\n          x: -prevVel.x * 0.8,\n          y: prevVel.y,\n        }));\n        setPosition((prevPos) => ({\n          x: position.x < 10 ? 10 : 740,\n          y: prevPos.y,\n        }));\n      }\n    }, 16); // ~60fps\n\n    return () => clearInterval(interval);\n  }, [position, velocity, pegs]);\n\n  return position;\n};\n\nconst generateCenteredPyramidPegs = (rows, centerX, startY) => {\n  const pegs = [];\n  const spacingX = 45;\n  const spacingY = 60;\n\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col <= row; col++) {\n      pegs.push({\n        x: centerX + (col - row / 2) * spacingX,\n        y: startY + row * spacingY,\n      });\n    }\n  }\n\n  return pegs;\n};\n\nexport default useBallMovement;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}